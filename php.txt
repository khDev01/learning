PHP 

server scripting language (executed on server)

for creating dynamic and interactive web pages

PHP 7 latest

Hypertext Preprocessor 

PHP files can contain text, html css JavaScript and php

PHP can:
generate dynamic content
create open write delete and close files on the server
collect form data
send and recieve cookies 
add delete and modify data in a database
control user access 
encrypt data

output html for browser, also output images, PDF files, flash movies, also any text such as XHTML and XML

benefits
runs on various platforms (Windows linux Mac OS etc)
compatible with nearly all servers (Apache, IIS etc)
supports many databases
free to use and download
easy to learn

Requirments
web host that supports PHP and MySQL
or install a web server, PHP and MySQL on a computer

syntax:
<?php
// code
?>

statements end with ';'

// single-line comment
#  single-line comment
/* multi-line comment */

variable syntax: '$varName'
only start with letter or underscore
variable names are case sensitive

basic output:
echo - no return vlaue - marginly faster
print - return value of 1 therefore can be used in expressions
echo "echo: no return value - faster"; 
print "print: return value 1 - one argument";

echo "hello";
print "hello";

data types:

$string = "Hello";
$int = 10;
$float = 15.371;
$bool = true;
$arr = array("red","green","blue");
$noVal = null;
class myObject {
  
}
$createObject = new myObject();

commonly used functions - manipulate strings
echo strlen("four");
echo str_word_count("two words");
echo strrev("revesed");
echo strpos("search position of word", "search"); //0
echo strpos("search position of word", "word"); //19
echo strpos("search position of word", "specific"); //false
echo str_replace("world", "word", "world repaced"); //word replaced

numbers
functions:
is_int()      //check if var is int:
is_float()    //check if var is float
is_finite()   // check numeric value is finite 
is_infinite() // check numeric value is infinite (>PHP_FLOAT_MAX)
is_nan()      // check if value is nan(not a number)
is_numeric()  // true if var is number or numeric string
              // PHP7 is numeric func returns false for numeric strings in hexidecimal form

casting strings and floats into ints
(int) or intval() // convert value to int

$x = 23465.768;   // Cast string to int
$int_cast = (int)$x;
echo $int_cast;
$x = "23465.768"; // Cast string to int
$int_cast = (int)$x;
echo $int_cast;

Constants
start with letter or underscore (no $ before name)
unlike var constants are global

define("name", "value", case-insensitive) //case-insensitive default=false

define("nums", [   // array constant
    "1",
    "3",
    "5"
]);
echo nums[0];

Operators:
// Arithmetic + - * / % ** 
// Assignment = += -= *= /= %=
// Comparison == != <> === !== < > <= >= <=>
// increm/dec ++$ $++ --$ $--
// Logical 'and' '&&', 'or' '||', 'xor', '!'
// String '.' for concatenation, '.=' assignment concatenation 
$concat . $enation $assingnment .= $concatination
// Conditional Assignment '?:' '??' 
$ternary = expr1 ? expr2 : expr3 $nullCoalescing = expr1 ?? expr2

Conditional statements
if (condtion) {}

elseif (condition) {}

else (condition) {}

Switch statement
swich (x) {
  case 1:
    // executed if x=1
  break; // stops code running into next case
  case 2: 
    // executed if x=2
  break;
  default
    // executed if x!=other cases
}

loops
for (condition) {}

foreach ($array as $value) {}

while (condition) {}

do {}
while(condition)

func defined as:
    block of statments that can be repeatedly used
    not execute automatically when a page loads
    executed by a call to the function
User defined functions:
function funcName(arg1, arg2, etc) {
    code to be executed;
}

function myNum($num) {
    echo "$num <br>";
}

myNum(1);
myNum(10);

PHP is loosely typed
PHP automatically associates a data type to a variable, depending on its value
PHP 7 type declarations added, therfore can specify the expected data type
To achieve this specify declare(strict_types=1); on the first line of php file
 <?php declare(strict_types=1); // strict requirement

function addNumbers(int $a, int $b) {
    return $a + $b;
}
echo addNumbers(5, "5 days");
// since strict is enabled and "5 days" is not an integer, an error will be thrown
?> 

Arrays - 3 different types
indexed - arrays with numeric index
associative - arrays with named keys
multimensional - arrays containing array/s

$myArray = array("item1", "item2", "item3");
echo count($myArray); // 3 count() func prints num of 

indexed arrays
2 ways to create indexed array:
  indexed arrays assigned automatically (start at 0)
    $myArray = array("item1", "item2", "item3");
    echo "my items:" . $myArray[0] . ", " . $myArray[1] . " and " . $myArray[2] . ".";
  or manually:
    $myArray[0] = "item1";
    $myArray[1] = "item2";
    $myArray[2] = "item3";
  loop through an indexed array:
  $myArray = array("item1", "item2", "item3");
  $arrlength = count($myArray);
  for($x = 0; $x < $arrlength; $x++) {
      echo $myArray[$x];
      echo "<br>";

associative
2 ways to create indexed array:
  $age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
  or 
  $age['Peter'] = "35";
  $age['Ben'] = "37";
  $age['Joe'] = "43"; 
  loop through an associative array:
  $age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");

  foreach($age as $x => $x_value) {
      echo "Key=" . $x . ", Value=" . $x_value;
      echo "<br>";
  }

multidimensional
  store values with more than one key
  $cars = array
  (
  array("Volvo",22,18),
  array("BMW",15,13),
  array("Saab",5,2),
  array("Land Rover",17,15)
  );
  dimension of an array indicates the number of indices
    2-dimensional array needs 2 indices to select an elment
    3-dimensional array needs 3 indices to select an elment etc
    echo $cars[0][0].": In stock: ".$cars[0][1].", sold: ".$cars[0][2].".<br>";
    echo $cars[1][0].": In stock: ".$cars[1][1].", sold: ".$cars[1][2].".<br>";
    echo $cars[2][0].": In stock: ".$cars[2][1].", sold: ".$cars[2][2].".<br>";
    echo $cars[3][0].": In stock: ".$cars[3][1].", sold: ".$cars[3][2].".<br>";
  We can also put a for loop inside another for loop to get the elements of the $cars array (we still have to point to the two indices):
    for ($row = 0; $row < 4; $row++) {
      echo "<p><b>Row number $row</b></p>";
      echo "<ul>";
      for ($col = 0; $col < 3; $col++) {
        echo "<li>".$cars[$row][$col]."</li>";
      }
      echo "</ul>";
    }

sort functions for arrays
sort() - sort arrays in ascending order
rsort() - sort arrays in descending order
asort() - sort associative arrays in ascending order, according to the value
ksort() - sort associative arrays in ascending order, according to the key
arsort() - sort associative arrays in descending order, according to the value
krsort() - sort associative arrays in descending order, according to the key

Supergloabls - global variables
  some predefined vars are superglobals:
    always accessible, regardless of scope - from ny func, class or file

  PHP superglobals
    $GLOBALS
    $_SERVER
    $_REQUEST
    $_POST
    $_GET
    $_FILES
    $_ENV
    $_COOKIE
    $_SESSION

  $GLOBALS - used to access global variables from anywher in the PHP script
    PHP stores all global variables in an array called $GLOBALS[index]
    The index holds the name of the variable.
    $x = 75;
    $y = 25;
     
    function addition() {
        $GLOBALS['z'] = $GLOBALS['x'] + $GLOBALS['y'];
    }
     
    addition();
    echo $z; 

  $_SERVER - holds info about headers, paths, and script locations
    some of the elements in $_SERVER:
      echo $_SERVER['PHP_SELF'];
      echo "<br>";
      echo $_SERVER['SERVER_NAME'];
      echo "<br>";
      echo $_SERVER['HTTP_HOST'];
      echo "<br>";
      echo $_SERVER['HTTP_REFERER'];
      echo "<br>";
      echo $_SERVER['HTTP_USER_AGENT'];
      echo "<br>";
      echo $_SERVER['SCRIPT_NAME'];

  $_REQUEST - used to collect data after submitting an HTML form
    <form method="post" action="<?php echo $_SERVER['PHP_SELF'];?>">
      Name: <input type="text" name="fname">
      <input type="submit">
    </form>

    <?php
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        // collect value of input field
        $name = $_REQUEST['fname'];
        if (empty($name)) {
            echo "Name is empty";
        } else {
            echo $name;
        }
    }
    ?>

  $_POST -sed to collect form data after submitting an HTML form with method="post"
    also widely used to pass variables
    <form method="post" action="<?php echo $_SERVER['PHP_SELF'];?>">
      Name: <input type="text" name="fname">
      <input type="submit">
    </form>

    <?php
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        // collect value of input field
        $name = $_POST['fname'];
        if (empty($name)) {
            echo "Name is empty";
        } else {
            echo $name;
        }
    }
    ?>

  $_GET - used to collect form data after submitting an HTML form with method="get"
    also collect data sent in the URL

Forms
GET and POST are superglobals</p>
  both are an array of variables
  GET passed via URL
  POST passed via HTTP POST method

  Get - about 2000 chars
    non-sensitive data

  POST - no limit
    sentitive data 

  Get
    <form action="php/forms.php" method="post">
      Name: <input type="text" name="pname"><br>
      <input type="submit">
    </form>
    forms.php
      Welcome <?php echo $_POST["pname"]; ?><br>

  POST
      <form action="php/forms.php" method="get">
        Name: <input type="text" name="gname"><br>
        <input type="submit" value="submit">
      </form>
    forms.php
      Welcome <?php echo $_GET["gname"]; ?><br>

Form validation
  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">

    $_SERVER["PHP_SELF"] is a super global which returns the currently executing script
    sends the submitted data to the page itself
    error messages on the same page

    htmlspecialchars() func converts speciau chars into HTML entities. 
      - replaces chars like '<' '>' with '&lt' '&gt'
      prevents eploiting code by ingecting HTMl or JS code(Cross-site Scripting attacks) in forms

    Avoid $_SERVER["PHP_SELF"] exploits by using htmlspecialchars() function
     <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">

  trim() func removes unnecessary chars(extra spaces, tabs, new line)

  strepslashes() removes slashes

      $name = $email = $gender = $comment = $website = "";

      if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $name = test_input($_POST["name"]);
        $email = test_input($_POST["email"]);
        $website = test_input($_POST["website"]);
        $comment = test_input($_POST["comment"]);
        $gender = test_input($_POST["gender"]);
      }

      function test_input($data) {
        $data = trim($data);
        $data = stripslashes($data);
        $data = htmlspecialchars($data);
        return $data;
      }

Required fields
  can use an if else statement for each $_POST var to check if it is empty with empty(), then if empty show an error message
  // define variables and set to empty values
  $nameErr = $emailErr = $genderErr = $websiteErr = "";
  $name = $email = $gender = $comment = $website = "";

  if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (empty($_POST["name"])) {
      $nameErr = "Name is required";
    } else {
      $name = test_input($_POST["name"]);
    }

    if (empty($_POST["email"])) {
      $emailErr = "Email is required";
    } else {
      $email = test_input($_POST["email"]);
    }

    if (empty($_POST["website"])) {
      $website = "";
    } else {
      $website = test_input($_POST["website"]);
    }

    if (empty($_POST["comment"])) {
      $comment = "";
    } else {
      $comment = test_input($_POST["comment"]);
    }

    if (empty($_POST["gender"])) {
      $genderErr = "Gender is required";
    } else {
      $gender = test_input($_POST["gender"]);
    }
  }

Validate E-mail and URL
  preg_match searches a string for a pattern, returns true if pattern found 
  check name is only letters
    $name = test_input($_POST["name"]);
    if (!preg_match("/^[a-zA-Z ]*$/",$name)) {
      $nameErr = "Only letters and white space allowed";
    }
  filter_var() easiest way to check an email address is well-formed
    $email = test_input($_POST["email"]);
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
      $emailErr = "Invalid email format";
    }
  check URL
    $website = test_input($_POST["website"]);
    if (!preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i",$website)) {
      $websiteErr = "Invalid URL";
    }

Form complete
  to show values in input fields after submit is hit a script is added in the value attribute
  but for textarea the script is added between its tags
  also for radio buttons the checked attribute must be manipulated not the value attribute
  Name: <input type="text" name="name" value="<?php echo $name;?>">

  E-mail: <input type="text" name="email" value="<?php echo $email;?>">

  Website: <input type="text" name="website" value="<?php echo $website;?>">

  Comment: <textarea name="comment" rows="5" cols="40"><?php echo $comment;?></textarea>

PHP Advanced
Date and time
  date() - format date and/or time
    formats a timestamp to a readable date and time
    return date/time from the server
  date(format,timestamp) // timestamp default is current date and time
  commonly used
    echo "Today date " . date("Y/m.d-") . "<br>";
    echo "Today day is " . date("l");
  automatically update copyright year with date():
    &copy; <?php echo date("Y");?>
  time
    echo "The time is " . date("h:i:sa");
    H-24hr h--12hr i-mins s-secs a-am/pm
  may set timezone if not correct due to server location:
    date_default_timezone_set("America/New_York");
    echo "The time is " . date("h:i:sa"); 
  mktime() returns the Unix timestamp for a date
  mktime(hr, min, sec, mnth, day, yr) 
    used with date() as user defined timestamp
    $d=mktime(11, 14, 54, 8, 12, 2014);
      echo "Created date is " . date("Y-m-d h:i:sa", $d);
  strtotime() convert human readable date string into Unix timestamp 
    strtotime(time, now)
    $d=strtotime("10:30pm April 15 2014");
      echo "Created date is " . date("Y-m-d h:i:sa", $d);
    strtotime() is a bit clever:
      $d=strtotime("tomorrow");
      echo date("Y-m-d h:i:sa", $d) . "<br>";

      $d=strtotime("next Saturday");
      echo date("Y-m-d h:i:sa", $d) . "<br>";

      $d=strtotime("+3 Months");
      echo date("Y-m-d h:i:sa", $d) . "<br>";
    next six fridays
      $startdate = strtotime("frdiay");
      $enddate = strtotime("+6 weeks", $startdate);

      while ($startdate < $enddate) {
        echo date("M d", $startdate) . "<br>";
        $startdate = strtotime("+1 week", $startdate);
      }
    no of days to 1st of june
      $d1=strtotime("June 01");
      $d2=ceil(($d1-time())/60/60/24);
      echo "There are " . $d2 ." days until 1th of June."

Include files
  copies text/code/markut and copies it ito file the include statement was used
  require vs include
  require - produce a fatal error
  include - produce warning and script will continue
    when in a Framework CMS, or complex PHP application, alawys use 'require' to include a key file to the flow of execution
      helps avoid compromising applications security and integrity

    // echo ran as still continue
    <h1>Welcome to my home page!</h1>
    <?php include 'noFileExists.php';
    echo "I have a $color $car.";
    ?>

    // not echo as php stopped
    <h1>Welcome to my home page!</h1>
    <?php require 'noFileExists.php';
    echo "I have a $color $car.";
    ?>

    Use require when the file is required by the application.

    Use include when the file is not required and application should continue when file is not found.

File handling
  PHP has functions for creating, reading, uploading, and editing files.
  common error: editing wrong file, rubbish data, deleting content
  readfile() reads and writes a file to the output buffer
    echo readfile("webdictionary.txt");
File open/read
  fopen() gives more options than readfile()
    fopen("file", "Mode")
      Modes = 
      r open read only    (read)
      w open write only   (writing)
      a open write only   (apending)
      x create write only
      r+ open read/write
      w+ open read/write
      a+ open read/write
      x+ create read/write
  fread() reads from an open file
    fread(file, bytes to read)
    $myfile = fopen("webdictionary.txt", "r") or die("Unable to open file!");
    fread($myfile,filesize("webdictionary.txt"));
  fclose() closes open file
    good practice to close files when finneshed with them
      $myfile = fopen("webdictionary.txt", "r");
      // some code to be executed....
      fclose($myfile);
  fgets() reads single line
    echo fgets($myfile);
    fclose($myfile);
    the file pointer mover to the next line after fgets() called
  feof() checks if end of file is reached
    useful for looping through data of unknown length
      $myfile = fopen("webdictionary.txt", "r") or die("Unable to open file!");
      // Output one line until end-of-file
      while(!feof($myfile)) {
        echo fgets($myfile) . "<br>";
      }
      fclose($myfile)
  fgetc() read single char 
    $myfile = fopen("webdictionary.txt", "r") or die("Unable to open file!");
    // Output one character until end-of-file
    while(!feof($myfile)) {
      echo fgetc($myfile);
    }
    fclose($myfile)
    the fgetc() moves file pointer to next char
File create/write
  fopen() can also create a file
    using fopen() on a non existting, with parameters ('w'/'a') file will create it 
    file is created in same directory
    fopen("testfile.txt", "w") 
    file permissions, make sure PHP file has full access to write info or will not work
  fwrite() write to a file
    fwrite("file", string to write)
    $myfile = fopen("newfile.txt", "w") or die("Unable to open file!");
    $txt = "John Doe\n";
    fwrite($myfile, $txt);
    $txt = "Jane Doe\n";
    fwrite($myfile, $txt);
    fclose($myfile);
  PHP Overwriting
    opening an existing file for writing will earase the data and the file will be empty
File upload
  configure the php.ini file do allow uploads
    edit file_uploads directive to'file_uploads = On' 
  HTML form
    // allow user to upload image
    <form action="upload.php" method="post" enctype="multipart/form-data">
      Select image to upload:
      <input type="file" name="fileToUpload" id="fileToUpload"> // type=file shows field as a filei-select control with Browse button next to it
      <input type="submit" value="Upload Image" name="submit">
    </form>
    Requirements for file upload to work:
      form method attribute ="post"
      form enctype attribute ="multipart/form-data"
  Upload file PHP script
    $target_dir = "uploads/"; // specifies directory where file will be placed
    $target_file = $target_dir . basename($_FILES["fileToUpload"]["name"]); // specifies the path of the file to upload
    $uploadOk = 1; 
    $imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION)); // holds sile extention (in lower case)
    // Check if image file is a actual image or fake image
    if(isset($_POST["submit"])) {
        $check = getimagesize($_FILES["fileToUpload"]["tmp_name"]);
        if($check !== false) {
            echo "File is an image - " . $check["mime"] . ".";
            $uploadOk = 1;
        } else {
            echo "File is not an image.";
            $uploadOk = 0;
        }
    }
  limit file size 
    // Check file size
    if ($_FILES["fileToUpload"]["size"] > 500000) { // larger than 500kb
        echo "Sorry, your file is too large.";
        $uploadOk = 0;
    } 
  limit file type
    // Allow certain file formats JPG, JPEG, PNG, and GIF files
    if($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg"
    && $imageFileType != "gif" ) {
        echo "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
        $uploadOk = 0;
    } 

  complete upload file PHP script
    <?php
    $target_dir = "uploads/";
    $target_file = $target_dir . basename($_FILES["fileToUpload"]["name"]);
    $uploadOk = 1;
    $imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));
    // Check if image file is a actual image or fake image
    if(isset($_POST["submit"])) {
        $check = getimagesize($_FILES["fileToUpload"]["tmp_name"]);
        if($check !== false) {
            echo "File is an image - " . $check["mime"] . ".";
            $uploadOk = 1;
        } else {
            echo "File is not an image.";
            $uploadOk = 0;
        }
    }
    // Check if file already exists
    if (file_exists($target_file)) {
        echo "Sorry, file already exists.";
        $uploadOk = 0;
    }
    // Check file size
    if ($_FILES["fileToUpload"]["size"] > 500000) {
        echo "Sorry, your file is too large.";
        $uploadOk = 0;
    }
    // Allow certain file formats
    if($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg"
    && $imageFileType != "gif" ) {
        echo "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
        $uploadOk = 0;
    }
    // Check if $uploadOk is set to 0 by an error
    if ($uploadOk == 0) {
        echo "Sorry, your file was not uploaded.";
    // if everything is ok, try to upload file
    } else {
        if (move_uploaded_file($_FILES["fileToUpload"]["tmp_name"], $target_file)) {
            echo "The file ". basename( $_FILES["fileToUpload"]["name"]). " has been uploaded.";
        } else {
            echo "Sorry, there was an error uploading your file.";
        }
    }
    ?>
Cookies
  * mainly used to identify a user
  * small file server embeds on user's computer
  * each time the same computer requests a page it will also send a cookie
  * PHP can create and retrieve cookie values

  setcookie() creates a cookie
  setcookie(name, value, expire, path, domain, secure, httponly);
    required name parameterm, others are optional
      setcookie() must appear before <html>
    <?php
    $cookie_name = "user";
    $cookie_value = "John Doe";
    setcookie($cookie_name, $cookie_value, time() + (86400 * 30), "/"); // 86400 = 1 day
    ?>
    <html>
    <body>

    <?php
    if(!isset($_COOKIE[$cookie_name])) {  // isset() find out if cookie exists
        echo "Cookie named '" . $cookie_name . "' is not set!";
    } else {
        echo "Cookie '" . $cookie_name . "' is set!<br>";
        echo "Value is: " . $_COOKIE[$cookie_name];
    }
    ?>
    value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).
  modify cookie 
    use setcookie() to set again
  delete cookie
    use setcookie() with expiration date
    <?php
    // set the expiration date to one hour ago
    setcookie("user", "", time() - 3600);
    ?>
    <html>
    <body>

    <?php
    echo "Cookie 'user' is deleted.";
    ?>
  check if cookies are enabled
    setcookie("test_cookie", "test", time() + 3600, '/');
    ?>
    <html>
    <body>

    <?php
    if(count($_COOKIE) > 0) {
        echo "Cookies are enabled.";
    } else {
        echo "Cookies are disabled.";
    }
    ?>
Sessions - store info in variables to use accross multiple pages
  unlike a cookie, not stored on the users computer
  web server does not know who or what you do, becuase the HTTP address does not maintain state
  by defualt session variables last until the user closes the browsers
  for permanent storage use a database
  Start PHP session
    session_start() starts a session
    required: must ve at start of document defore <html>
    session vars are set with $_SESSION
      <?php
      // Start the session
      session_start();
      ?>
      <!DOCTYPE html>
      <html>
      <body>

      <?php
      // Set session variables
      $_SESSION["favcolor"] = "green";
      $_SESSION["favanimal"] = "cat";
      echo "Session variables are set.";
      ?>
  Get session var values
    <?php
    // Echo session variables that were set on previous page
    echo "Favorite color is " . $_SESSION["favcolor"] . ".<br>";
    echo "Favorite animal is " . $_SESSION["favanimal"] . ".";
    ?>
    // or
    print_r($_SESSION);
  Modify session var
    overwrite it to modify
  Destroy session
    session_unset() - removes all session variables
    session_destroy() - destroy the session
Filters
  PHP filters are used to validate and sanitize external input
  Validating data = Determine if the data is in proper form.
  Sanitizing data = Remove any illegal character from the data.
  PHP filter extension includes funcs to check user input and designed to make data validation easier and quicker
  filter_list() list what PHP filter extension offers
  why use filters
    web apps recieve external input which can be:
      user input from a form 
      cookies
      web services data 
      server vars
      database query results
    security: external data should always be validated
      invalid submitted data may lead to security problems and break webpage
      PHP filters make sure your app gets the correct input
  filter_var() validates and sanitizes data
    filters a single var with a specified filter
    filter_var(var, check type)
  sanitize string
    $str = "<h1>Hello World!</h1>";
    $newstr = filter_var($str, FILTER_SANITIZE_STRING); // removes all html tags
    echo $newstr;
  validate int
    $int = 100;
    if (!filter_var($int, FILTER_VALIDATE_INT) === false) { // check if int
        echo("Integer is valid");
    } else {
        echo("Integer is not valid");
    } // this code will return 'int not valid' with 0
    validate int problem with '0'
      $int = 0;
      if (filter_var($int, FILTER_VALIDATE_INT) === 0 || !filter_var($int, FILTER_VALIDATE_INT) === false) { // check if int
          echo("Integer is valid");
      } else {
          echo("Integer is not valid");
      }
  validate an IP address
    $ip = "127.0.0.1";
    if (!filter_var($ip, FILTER_VALIDATE_IP) === false) {
        echo("$ip is a valid IP address");
    } else {
        echo("$ip is not a valid IP address");
    }
  sanitize and validate email address
    $email = "john.doe@example.com";
    // Remove all illegal characters from email
    $email = filter_var($email, FILTER_SANITIZE_EMAIL);
    // Validate e-mail
    if (!filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
        echo("$email is a valid email address");
    } else {
        echo("$email is not a valid email address");
    }
  sanitize and validate URL
    $url = "https://www.w3schools.com";
    // Remove all illegal characters from a url
    $url = filter_var($url, FILTER_SANITIZE_URL);
    // Validate url
    if (!filter_var($url, FILTER_VALIDATE_URL) === false) {
        echo("$url is a valid URL");
    } else {
        echo("$url is not a valid URL");
    }
Filters advanced
  validate int within a range
    $int = 122;
    $min = 1;
    $max = 200;

    if (filter_var($int, FILTER_VALIDATE_INT, array("options" => array("min_range"=>$min, "max_range"=>$max))) === false) {
        echo("Variable value is not within the legal range");
    } else {
        echo("Variable value is within the legal range");
    }
  Validate IPv6 address
    $ip = "2001:0db8:85a3:08d3:1319:8a2e:0370:7334";

    if (!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) === false) {
        echo("$ip is a valid IPv6 address");
    } else {
        echo("$ip is not a valid IPv6 address");
    }
  Validate URL - must contain querystring
    $url = "https://www.website.com";

    if (!filter_var($url, FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED) === false) {
        echo("$url is a valid URL with a query string");
    } else {
        echo("$url is not a valid URL with a query string");
    }
  remove chars with ASCII value > 127
    $str = "<h1>Hello WorldÆØÅ!</h1>";

    $newstr = filter_var($str, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_HIGH);
    echo $newstr;
PHP and JSON
  JSON - JavaScript Object Notation, is a syntax for storing exchanging data
    JRON can be sent to and from a server and used as a data format by any programming language
  PHP includes built-in functions to handle JSON
    json_encode() - encode value to JSON format
      $age = array("Peter"=>35, "Ben"=>37, "Joe"=>43);
      echo json_encode($age);  //encode associative array into JSON object
    json_decode - decode JSON object into PHP object or an associative array
      $jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';
      var_dump(json_decode($jsonobj)); // JSON data into PHP object 
      returns objet by default, second parameter set to true Json objects are decoded into associative array
        $jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';

        var_dump(json_decode($jsonobj, true));
    accessing decoded values
      $jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';

      $obj = json_decode($jsonobj);

      echo $obj->Peter;
      echo $obj->Ben;
      echo $obj->Joe;
    looping through values
      $jsonobj = '{"Peter":35,"Ben":37,"Joe":43}';

      $obj = json_decode($jsonobj);

      foreach($obj as $key => $value) {
        echo $key . " => " . $value . "<br>";

OOP PHP
  PHP5+ allows oo style PHP
  OOP is faster and easier to execute