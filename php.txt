PHP 

server scripting language (executed on server)

for creating dynamic and interactive web pages

PHP 7 latest

Hypertext Preprocessor 

PHP files can contain text, html css JavaScript and php

PHP can:
generate dynamic content
create open write delete and close files on the server
collect form data
send and recieve cookies 
add delete and modify data in a database
control user access 
encrypt data

output html for browser, also output images, PDF files, flash movies, also any text such as XHTML and XML

benefits
runs on various platforms (Windows linux Mac OS etc)
compatible with nearly all servers (Apache, IIS etc)
supports many databases
free to use and download
easy to learn

Requirments
web host that supports PHP and MySQL
or install a web server, PHP and MySQL on a computer

syntax:
<?php
// code
?>

statements end with ';'

// single-line comment
#  single-line comment
/* multi-line comment */

variable syntax: '$varName'
only start with letter or underscore
variable names are case sensitive

basic output:
echo - no return vlaue - marginly faster
print - return value of 1 therefore can be used in expressions
echo "echo: no return value - faster"; 
print "print: return value 1 - one argument";

echo "hello";
print "hello";

data types:

$string = "Hello";
$int = 10;
$float = 15.371;
$bool = true;
$arr = array("red","green","blue");
$noVal = null;
class myObject {
  
}
$createObject = new myObject();

commonly used functions - manipulate strings
echo strlen("four");
echo str_word_count("two words");
echo strrev("revesed");
echo strpos("search position of word", "search"); //0
echo strpos("search position of word", "word"); //19
echo strpos("search position of word", "specific"); //false
echo str_replace("world", "word", "world repaced"); //word replaced

numbers
functions:
is_int()      //check if var is int:
is_float()    //check if var is float
is_finite()   // check numeric value is finite 
is_infinite() // check numeric value is infinite (>PHP_FLOAT_MAX)
is_nan()      // check if value is nan(not a number)
is_numeric()  // true if var is number or numeric string
              // PHP7 is numeric func returns false for numeric strings in hexidecimal form

casting strings and floats into ints
(int) or intval() // convert value to int

$x = 23465.768;   // Cast string to int
$int_cast = (int)$x;
echo $int_cast;
$x = "23465.768"; // Cast string to int
$int_cast = (int)$x;
echo $int_cast;

Constants
start with letter or underscore (no $ before name)
unlike var constants are global

define("name", "value", case-insensitive) //case-insensitive default=false

define("nums", [   // array constant
    "1",
    "3",
    "5"
]);
echo nums[0];

Operators:
// Arithmetic + - * / % ** 
// Assignment = += -= *= /= %=
// Comparison == != <> === !== < > <= >= <=>
// increm/dec ++$ $++ --$ $--
// Logical 'and' '&&', 'or' '||', 'xor', '!'
// String '.' for concatenation, '.=' assignment concatenation 
$concat . $enation $assingnment .= $concatination
// Conditional Assignment '?:' '??' 
$ternary = expr1 ? expr2 : expr3 $nullCoalescing = expr1 ?? expr2

Conditional statements
if (condtion) {}

elseif (condition) {}

else (condition) {}

Switch statement
swich (x) {
  case 1:
    // executed if x=1
  break; // stops code running into next case
  case 2: 
    // executed if x=2
  break;
  default
    // executed if x!=other cases
}

loops
for (condition) {}

foreach ($array as $value) {}

while (condition) {}

do {}
while(condition)

func defined as:
    block of statments that can be repeatedly used
    not execute automatically when a page loads
    executed by a call to the function
User defined functions:
function funcName(arg1, arg2, etc) {
    code to be executed;
}

function myNum($num) {
    echo "$num <br>";
}

myNum(1);
myNum(10);

PHP is loosely typed
PHP automatically associates a data type to a variable, depending on its value
PHP 7 type declarations added, therfore can specify the expected data type
To achieve this specify declare(strict_types=1); on the first line of php file
 <?php declare(strict_types=1); // strict requirement

function addNumbers(int $a, int $b) {
    return $a + $b;
}
echo addNumbers(5, "5 days");
// since strict is enabled and "5 days" is not an integer, an error will be thrown
?> 

Arrays - 3 different types
indexed - arrays with numeric index
associative - arrays with named keys
multimensional - arrays containing array/s

$myArray = array("item1", "item2", "item3");
echo count($myArray); // 3 count() func prints num of 

indexed arrays
2 ways to create indexed array:
  indexed arrays assigned automatically (start at 0)
    $myArray = array("item1", "item2", "item3");
    echo "my items:" . $myArray[0] . ", " . $myArray[1] . " and " . $myArray[2] . ".";
  or manually:
    $myArray[0] = "item1";
    $myArray[1] = "item2";
    $myArray[2] = "item3";
  loop through an indexed array:
  $myArray = array("item1", "item2", "item3");
  $arrlength = count($myArray);
  for($x = 0; $x < $arrlength; $x++) {
      echo $myArray[$x];
      echo "<br>";

associative
2 ways to create indexed array:
  $age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
  or 
  $age['Peter'] = "35";
  $age['Ben'] = "37";
  $age['Joe'] = "43"; 
  loop through an associative array:
  $age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");

  foreach($age as $x => $x_value) {
      echo "Key=" . $x . ", Value=" . $x_value;
      echo "<br>";
  }

multidimensional
  store values with more than one key
  $cars = array
  (
  array("Volvo",22,18),
  array("BMW",15,13),
  array("Saab",5,2),
  array("Land Rover",17,15)
  );
  dimension of an array indicates the number of indices
    2-dimensional array needs 2 indices to select an elment
    3-dimensional array needs 3 indices to select an elment etc
    echo $cars[0][0].": In stock: ".$cars[0][1].", sold: ".$cars[0][2].".<br>";
    echo $cars[1][0].": In stock: ".$cars[1][1].", sold: ".$cars[1][2].".<br>";
    echo $cars[2][0].": In stock: ".$cars[2][1].", sold: ".$cars[2][2].".<br>";
    echo $cars[3][0].": In stock: ".$cars[3][1].", sold: ".$cars[3][2].".<br>";
  We can also put a for loop inside another for loop to get the elements of the $cars array (we still have to point to the two indices):
    for ($row = 0; $row < 4; $row++) {
      echo "<p><b>Row number $row</b></p>";
      echo "<ul>";
      for ($col = 0; $col < 3; $col++) {
        echo "<li>".$cars[$row][$col]."</li>";
      }
      echo "</ul>";
    }

sort functions for arrays
sort() - sort arrays in ascending order
rsort() - sort arrays in descending order
asort() - sort associative arrays in ascending order, according to the value
ksort() - sort associative arrays in ascending order, according to the key
arsort() - sort associative arrays in descending order, according to the value
krsort() - sort associative arrays in descending order, according to the key

Supergloabls - global variables
  some predefined vars are superglobals:
    always accessible, regardless of scope - from ny func, class or file

  PHP superglobals
    $GLOBALS
    $_SERVER
    $_REQUEST
    $_POST
    $_GET
    $_FILES
    $_ENV
    $_COOKIE
    $_SESSION

  $GLOBALS - used to access global variables from anywher in the PHP script
    PHP stores all global variables in an array called $GLOBALS[index]
    The index holds the name of the variable.
    $x = 75;
    $y = 25;
     
    function addition() {
        $GLOBALS['z'] = $GLOBALS['x'] + $GLOBALS['y'];
    }
     
    addition();
    echo $z; 

  $_SERVER - holds info about headers, paths, and script locations
    some of the elements in $_SERVER:
      echo $_SERVER['PHP_SELF'];
      echo "<br>";
      echo $_SERVER['SERVER_NAME'];
      echo "<br>";
      echo $_SERVER['HTTP_HOST'];
      echo "<br>";
      echo $_SERVER['HTTP_REFERER'];
      echo "<br>";
      echo $_SERVER['HTTP_USER_AGENT'];
      echo "<br>";
      echo $_SERVER['SCRIPT_NAME'];

  $_REQUEST - used to collect data after submitting an HTML form
    <form method="post" action="<?php echo $_SERVER['PHP_SELF'];?>">
      Name: <input type="text" name="fname">
      <input type="submit">
    </form>

    <?php
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        // collect value of input field
        $name = $_REQUEST['fname'];
        if (empty($name)) {
            echo "Name is empty";
        } else {
            echo $name;
        }
    }
    ?>

  $_POST -sed to collect form data after submitting an HTML form with method="post"
    also widely used to pass variables
    <form method="post" action="<?php echo $_SERVER['PHP_SELF'];?>">
      Name: <input type="text" name="fname">
      <input type="submit">
    </form>

    <?php
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        // collect value of input field
        $name = $_POST['fname'];
        if (empty($name)) {
            echo "Name is empty";
        } else {
            echo $name;
        }
    }
    ?>

  $_GET - used to collect form data after submitting an HTML form with method="get"
    also collect data sent in the URL

Forms
GET and POST are superglobals</p>
  both are an array of variables
  GET passed via URL
  POST passed via HTTP POST method

  Get - about 2000 chars
    non-sensitive data

  POST - no limit
    sentitive data 

  Get
    <form action="php/forms.php" method="post">
      Name: <input type="text" name="pname"><br>
      <input type="submit">
    </form>
    forms.php
      Welcome <?php echo $_POST["pname"]; ?><br>

  POST
      <form action="php/forms.php" method="get">
        Name: <input type="text" name="gname"><br>
        <input type="submit" value="submit">
      </form>
    forms.php
      Welcome <?php echo $_GET["gname"]; ?><br>

Form validation
  <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">

    $_SERVER["PHP_SELF"] is a super global which returns the currently executing script
    sends the submitted data to the page itself
    error messages on the same page

    htmlspecialchars() func converts speciau chars into HTML entities. 
      - replaces chars like '<' '>' with '&lt' '&gt'
      prevents eploiting code by ingecting HTMl or JS code(Cross-site Scripting attacks) in forms

    Avoid $_SERVER["PHP_SELF"] exploits by using htmlspecialchars() function
     <form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">

  trim() func removes unnecessary chars(extra spaces, tabs, new line)

  strepslashes() removes slashes

      $name = $email = $gender = $comment = $website = "";

      if ($_SERVER["REQUEST_METHOD"] == "POST") {
        $name = test_input($_POST["name"]);
        $email = test_input($_POST["email"]);
        $website = test_input($_POST["website"]);
        $comment = test_input($_POST["comment"]);
        $gender = test_input($_POST["gender"]);
      }

      function test_input($data) {
        $data = trim($data);
        $data = stripslashes($data);
        $data = htmlspecialchars($data);
        return $data;
      }

Required fields
  can use an if else statement for each $_POST var to check if it is empty with empty(), then if empty show an error message
  // define variables and set to empty values
  $nameErr = $emailErr = $genderErr = $websiteErr = "";
  $name = $email = $gender = $comment = $website = "";

  if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (empty($_POST["name"])) {
      $nameErr = "Name is required";
    } else {
      $name = test_input($_POST["name"]);
    }

    if (empty($_POST["email"])) {
      $emailErr = "Email is required";
    } else {
      $email = test_input($_POST["email"]);
    }

    if (empty($_POST["website"])) {
      $website = "";
    } else {
      $website = test_input($_POST["website"]);
    }

    if (empty($_POST["comment"])) {
      $comment = "";
    } else {
      $comment = test_input($_POST["comment"]);
    }

    if (empty($_POST["gender"])) {
      $genderErr = "Gender is required";
    } else {
      $gender = test_input($_POST["gender"]);
    }
  }

Validate E-mail and URL
  preg_match searches a string for a pattern, returns true if pattern found 
  check name is only letters
    $name = test_input($_POST["name"]);
    if (!preg_match("/^[a-zA-Z ]*$/",$name)) {
      $nameErr = "Only letters and white space allowed";
    }
  filter_var() easiest way to check an email address is well-formed
    $email = test_input($_POST["email"]);
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
      $emailErr = "Invalid email format";
    }
  check URL
    $website = test_input($_POST["website"]);
    if (!preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i",$website)) {
      $websiteErr = "Invalid URL";
    }

Form complete
  to show values in input fields after submit is hit a script is added in the value attribute
  but for textarea the script is added between its tags
  also for radio buttons the checked attribute must be manipulated not the value attribute
  Name: <input type="text" name="name" value="<?php echo $name;?>">

  E-mail: <input type="text" name="email" value="<?php echo $email;?>">

  Website: <input type="text" name="website" value="<?php echo $website;?>">

  Comment: <textarea name="comment" rows="5" cols="40"><?php echo $comment;?></textarea>

PHP Advanced
Date and time
  date() - format date and/or time
    formats a timestamp to a readable date and time
    return date/time from the server
  date(format,timestamp) // timestamp default is current date and time
  commonly used
    echo "Today date " . date("Y/m.d-") . "<br>";
    echo "Today day is " . date("l");
  automatically update copyright year with date():
    &copy; <?php echo date("Y");?>
  time
    echo "The time is " . date("h:i:sa");
    H-24hr h--12hr i-mins s-secs a-am/pm
  may set timezone if not correct due to server location:
    date_default_timezone_set("America/New_York");
    echo "The time is " . date("h:i:sa"); 
  mktime() returns the Unix timestamp for a date
  mktime(hr, min, sec, mnth, day, yr) 
    used with date() as user defined timestamp
    $d=mktime(11, 14, 54, 8, 12, 2014);
      echo "Created date is " . date("Y-m-d h:i:sa", $d);
  strtotime() convert human readable date string into Unix timestamp 
    strtotime(time, now)
    $d=strtotime("10:30pm April 15 2014");
      echo "Created date is " . date("Y-m-d h:i:sa", $d);
    strtotime() is a bit clever:
      $d=strtotime("tomorrow");
      echo date("Y-m-d h:i:sa", $d) . "<br>";

      $d=strtotime("next Saturday");
      echo date("Y-m-d h:i:sa", $d) . "<br>";

      $d=strtotime("+3 Months");
      echo date("Y-m-d h:i:sa", $d) . "<br>";
    next six fridays
      $startdate = strtotime("frdiay");
      $enddate = strtotime("+6 weeks", $startdate);

      while ($startdate < $enddate) {
        echo date("M d", $startdate) . "<br>";
        $startdate = strtotime("+1 week", $startdate);
      }
    no of days to 1st of june
      $d1=strtotime("June 01");
      $d2=ceil(($d1-time())/60/60/24);
      echo "There are " . $d2 ." days until 1th of June."

Include files
  copies text/code/markut and copies it ito file the include statement was used
  require vs include
  require - produce a fatal error
  include - produce warning and script will continue
    when in a Framework CMS, or complex PHP application, alawys use 'require' to include a key file to the flow of execution
      helps avoid compromising applications security and integrity

    // echo ran as still continue
    <h1>Welcome to my home page!</h1>
    <?php include 'noFileExists.php';
    echo "I have a $color $car.";
    ?>

    // not echo as php stopped
    <h1>Welcome to my home page!</h1>
    <?php require 'noFileExists.php';
    echo "I have a $color $car.";
    ?>

