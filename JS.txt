Replace all instances of 'myArr' to 'arr' and 'myArr1' to 'arr1' etc.
JavaScript
	programming language used for the web, server programs like Node.js and databases like MongoDB
	program behaviour of web pages
	can change HTML Content, attributes and styles(CSS)
	Requirments: none

syntax:
<script> js code </script> // internal within html
<script src="myScript.js"></script> // external - point to js file within html

Javascript can be placed within head or body of html

Output
	display data in different ways:
		innerHTML	- write into HTML element
		document.write() - write into HTML output
		window.alert() - write to alert box
		console.log() - write to browser console 
	innerHTML - property that defines HTML content
		can use document.getElementById(id) to access HTML element
		changing innerHTML property of an element is a common way of displaying data
	document.write() - good for testing purposes
		warning: using document.write() after html document is lodaed will delete all existing HTML
		<h1>My First Web Page</h1>
		<p>My first paragraph.</p>
		// button pressed after html is loaded
		<button type="button" onclick="document.write(5 + 6)">Try it</button> 
	Window.alert()
		window.alert(5 + 6);
	console.log() - usefull for depugging purposes
	JavaScript print - there are no print objects or print methods
		cannot access output devices from JS
		One exception is using:
		window.print() - prints current window content

JS statements
	compose of values, operators, expressions, keywords and comments
	statements are executed one by one in order from top to bottom of file
	';' seperates JS statements
	multipul stasemnts are allowed on one line
whitespace is ignored
JS is case sensitive
Hyphens are not allowed in JavaScript. They are reserved for subtractions.
best to use camelCase

// comment
/* multi-line comment */

Variables

	let variable; // same as undefined if not already initialise
	let string = "Hello";
	let int = 10;
	let float = 15.371;
	let bool = true;
	let arr = [red,green,blue];
	let dog = { name : 'Spot', breed : 'Dalmatian' };
	let notDefine = undefined;
	let nothing = null; // typeof is an object but is null
		undefined vs null
		typeof undefined    // undefined
		typeof null         // object
		null === undefined  // false
		null == undefined   // true
	// constant
	const constant = 9;

		All JS datatypes have a 'valuOf()' and 'toString()' method

	typeof - operator to find type of variable
		typeof "John" // Returns "string"
		typeof 314  // Returns "number"

	primative data - simtle single data value 
		typeop operator returns these primative types
			string, number, boolian, undefined
	complex data
		typeof operator returns either:
			function
			object - returns 'object' for objects, arrays and null

	JS identifiers rule
		can contain letters, digits, underscores and dollar signs
		must start with letter or '$'
		reserved words cannot be used such as JS keywords
Function - block of code to perform a particular task
	function is executed when it is invoked
	function name(parameter1, parameter2, parameter3) {
	  // code to be executed
	}	

	Local scope
		variables decalared in a function become local to it
		local variables are created when a func starts and deleted when func complete
			variables can only be accessde from within the function
			// cannot use myVar (outside of scope)

			function myFunction() {
			  let myVar = "hello";
			  // can use myVar (within scope)
			}

			// cannot use myVar (outside of scope) 

Obejects
	objects have properties and methods 
	properties are writen in 'name:value' pairs:
		let myObj = {shape:"square", size:"500", color:"white"};
		access object properties
			'objName.propertyName' or 'objName["propertyName"]'
	methods are actions that can be preformed on okjects
	a method is a function stored as a property:
		let person = {
		  firstName: "John",
		  lastName : "Doe",
		  id       : 5566,
		  fullName : function() {
		    return this.firstName + " " + this.lastName;
		  }
		};
		access object methods
			'objName.methodName()' 
			accessing a method without '()' returns the function definition
	Avoid declaring strings, numbers and booleans as objects 
		* as they complicate code and slow down execution speed
		when a var is declared with the 'new' keyword the var is created as an object
	let x = new String();        // Declares x as a String object
	let y = new Number();        // Declares y as a Number object
	let z = new Boolean();       // Declares z as a Boolean object

	comparing JS oblects will always return false (x==y) and (x===y)

	all JS obj have a toString() method

	'this' keyword
		in a function definition this refers to the owner of the functon
Events
	HTML events cause "something" to happen to HTML elements 
	when JS is used in HTML, JS can "react" on these events
	JS can execute code when events are detected
	<element event='some JavaScript'> or <element event="some JavaScript">
	e.g. <button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>
	or call a func:  <button onclick="displayDate()">The time is?</button> 
	common HTML events
	onchange, onclick, onmouseover, onmouseout, onkeydown, onload
	event handlers can handle and verify, user input, user actions and browser actions

Strings 
	let squote = 'single quotes';
	let dquote = "or double";
	find length of strings with the built-in 'lenght' property
		let txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		document.getElementById("demo").innerHTML = txt.length;
	escape char '\' turns special chars into string chars
String methods
	primative values vannot have properties or methods as they are not objects
	however methods and properties are available to primitive values 
		as JS treats primative values as objects when execusing methods and properties
		e.g. the 'length' property returns the length of a string
	indexOf() returns the index of the first occurenct of text within a string
	JS counts positions from zero
	lastIndexOf() returns the index last occurence of text within a string (searches backwards)
	indexOf() and lastIndexOf() both:
		* return '-1' when no occurence found
		* accept second parameter for starting position for search
	search() acts exactly same as indexOf() but does not take second starting position argument, and can take powerful search values (regular expressions) which indexOf() cannot
	Extracting string parts	- three methods to extract part of sting
    slice(start, end) - returns extracted part in a new string
    substring(start, end) - same as slice() but cannot take negatives
    substr(start, length) - same as slice but second parameter species length to be extracted
    start and end values are indexes, if negative the position is counted from end of string. can have one parameter
	replacing string content
		replace('strPart','replacement') - replaces value with another (in a new sting)
			default: case sensitive, first word match
				regular expressions are written without quotes
				replace case insensitive by using a regular expression with '/i' flag (insensitive)
					replace(/strPart/i,'replacement') 
				repalce all matches using a regular expression with '/g' flag (global match)
					replace(/strPart/g,'replacement') 
	convert to upper and lower case
		toUpperCase() converts to upper case
		toLowerCase() converts to lower case
	concatination
		concat() joins two or more strings
	remove whitespace
		trim() removes whitespase from both sides of string 
			(not supported IE8 or lower)
		for IE8 support use replace() with a regular expression:
			replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ''))
			use above solution to add trim function to 'string.prototype'
	extracting chars - three main methods
    charAt(position) - return char at specified index
    charCodeAt(position) returns unicode of char at specified index
    Property access[ ] - same as charAt() but uses property access
    	property access may beu npredictable
  convert string to array
  	split() 
	  	split(",") // split on commas
			split(" ") // split on spaces
			split("|") // split on pipe 
			split("")  // split on chars
Numbers
	JS has only one type of number; no int, short, long, float
	can use scientific notation for extra samll and large numbers 'let x= 12e5;'
	JS numbers are always 64-bit floating point, they are always stored as double precision floating point numbers
	this format stores numbers in64 bits, where faction the number is stored in bits 0-51, exponent in 52-62 and the sign in 63
	Precision
		ints are accurate up to 15 digits
		macimum number of decimals is 17 digits
	Adding numbers and strings 
		JS use '+' for both addition and concatenation	
			numbers are added 
			strings are concatinated
		num + num = num
		str + str = str
		num + str = str
		str + num = str
	Numeric strings
		JS strings can have numeric content
		JS will try to convert string to numbers in all numeric operations
		"2" + "1" = "21" //str '+' concatinates
		"2" - "1" = 1    //num
		"2" * "1" = 2    //num
		"2" / "1" = 2    //num
	NaN - Not a Number
		JS reserved word indicating that a numder is not a legal number
		arithmetics with non-numeric strings result in NaN
		1 * "hello" = NaN
		1 * "100" = 100    // number with numeric stirng 
		isNaN() - returns true if not a number
		isNaN is a gloval JS function
		NaN is a number 'typof NaN' //returns number
	Infinity - returned if number outride of largest possible number
		let myNumber = 2;
			while (myNumber != Infinity) {   // Execute until Infinity
			  myNumber = myNumber * myNumber;
			}
		division by zero generates 'Infinity'
		Infinity is a number 'typeof Infinity' //returns number
	Hexadecimal
		JS interprets numeric constants as hexadecimal if preceded by 0x
			let x = 0xFF // x will be 255
		defualt: JS display numbers as base 10 decimals
			but toString() output numbers form base 2 to base 36
			hecadecimal - base 16, deciaml - base 10, octal - 8, binary - 2
				var myNumber = 32;
				myNumber.toString(10);  // returns 32
				myNumber.toString(32);  // returns 10
				myNumber.toString(16);  // returns 20
				myNumber.toString(8);   // returns 40
				myNumber.toString(2);   // returns 100000
Number methods 
	All number methods can be used on any type on numbers (literals, vars, or expressions)
	toString() returns a number as a string
	toExonential(charsRoundedAfterDecimal) returns string, with number rounded using exponential notation // parameter will not round number if no parameter
	toFixed(noOfDecimals) returns a string. with specified numder of decimals
	toPrecision() returns string, with specified number length
	valueOf() returns a number as a number // no reason to use in your code
	converting vars to numbers - 3 methods
		these methods are global JS method not number methods
		Number() - returns number, converted from argument
		parseInt() - returns integer, from parsing argument
		parseFloat() - returns float, from parsing argument

		Number(true);      // returns 1
		Number(false);     // returns 0
		Number("10");      // returns 10
		Number("10.33");   // returns 10.33
		Number("10 33");   // returns NaN if number cannot be converted
 		Number(new Date("2017-09-30")); // returns 1506729600000 - milisecs since 1.1.1970

 		parseFloat, parseInt - spaces are allowed, but only first num is returned:
			parseInt("10");         // returns 10
			parseInt("10.33");      // returns 10
			parseInt("10 20 30");   // returns 10
			parseInt("10 years");   // returns 10
			parseInt("years 10");   // returns NaN  

			parseFloat("10");        // returns 10
			parseFloat("10.33");     // returns 10.33
			parseFloat("10 20 30");  // returns 10
			parseFloat("10 years");  // returns 10
			parseFloat("years 10");  // returns NaN 
	Number properties
	MAX_VALUE - returns largest possible number in JS
	MIN_VALUE - returns smallest possible number in JS
	POSITIVLE_INFINITY - represents positive infinity (returned on overflow)
	NEGATIVE_INFINITY - represents negative infinity (returned on overflow)
	NaN - represtents not a number value
		number properties cannot be used on vars 
		number properties belong to the JS number object wrapper called Number
		there properties can olny be accessed as Number.MAX_VALUE 
			not var.MAX_VALUE, expression or value will return undefined
Arrays
	store multiple values in a single var
	values can be accessed using indexes
	creating array:
		array literal is easiet way to create JS array
			let array_name = [item1, item2, ...];   
		Dont use: JS 'new' keyword also creates array
		let cars = new Array("Saab", "Volvo", "BMW"); // use array literal instead as simpler, faster and easily readable.
	access element of array
		myArray[0] // selects first element
	change array element 
		myArray[0] = "changed";
 	access full array by reffering to array name
		document.getElementById("demo").innerHTML = myArray;
	arrays are objects
		but best described as arrays
		arrays use numbers to access its elements myArr[0]
		objects use names to access its members   myObj.firstMember
	array elements can be objects
		variables of different types can be in the same array
			objects, functions and arrays can all be within the same array
	array properties and methods
		built-in array properties and methods are very useful
		length - returns length of array (highest index + 1)
			myArr[0] 										//accessing first element
			myArr[myArr.length - 1]     //accessing last element
	loop through arrays
		// for loop - easiest
			var fruits, text, fLen, i;
			fruits = ["Banana", "Orange", "Apple", "Mango"];
			fLen = fruits.length;

			text = "<ul>";
			for (i = 0; i < fLen; i++) {
			  text += "<li>" + fruits[i] + "</li>";
			}
			text += "</ul>";
		// Array.foreach() function
			var fruits, text;
			fruits = ["Banana", "Orange", "Apple", "Mango"];

			text = "<ul>";
			fruits.forEach(myFunction);
			text += "</ul>";

			function myFunction(value) {
			  text += "<li>" + value + "</li>";
			}
	add array elments
		esiest way - push()
			var fruits = ["Banana", "Orange", "Apple", "Mango"];
			fruits.push("Lemon");    // adds a new element (Lemon) to fruits 
		also 'length' property
			var fruits = ["Banana", "Orange", "Apple", "Mango"];
			fruits[fruits.length] = "Lemon";    // adds a new element (Lemon) to fruits 
		adding elements with a very high index(not next index) causes undefined to fill between:
			var fruits = ["Banana", "Orange", "Apple", "Mango"];
			fruits[6] = "Lemon";    // adds a new element (Lemon) to fruits but adds undefined
	associative arrays  - named indexes
		JS does not support associative arrays 
		JS arrays are always numbered
	array vs objects
		arr - numbered indexes
		obj - named indexes
		When to use arrys or Objects
			objects when want named elments 
			arrays when want numbered elements
	Avoid new Array()
		no need to use new Array()
		can also complicate code (produces undefined when changing)
		use '[]' instead
	recognize array
		typeof - returns type object
		Array.isArray(myArray) returns true if array
			some browsers do not support this method
				solved: create your own isArrau() function
					function isArray(x) { // returns true if array
					  return x.constructor.toString().indexOf("Array") > -1; 
					} // actually returns true if obj protopype contains word array
		instanceof operator returns true if an object is created by a given constructor
			var fruits = ["Banana", "Orange", "Apple", "Mango"];
			fruits instanceof Array;   // returns true 
Array methods
	toString() - converts array to string of array values seperated by comma
		myArr.toString();
	join() - same as toString(), but can specify the seperator
		myArr.join(" - ")
	popping - removing last element
		pop() returns last element which is "popped out"
		myArr.pop()
	pushing - add element
		push() returns the new array length and adds new element
		myArr.push("newElement")
	shifting - same as popping, but removes first element
		shift() returns value that was "shifted out" and "shifts" all other indexes lower 
			myArr.shift()
		unshift() returns the new array length and adds new element to beggining of array and "unshifts" older elements
	changing elements
		access array elements by using their index number
		length property is an easy way to append new elements to an array
	deleting elements
		delete operator deletes elments
			delete myArr[0]
		deleting elements replaces them with 'undefined'
			use shift() or pop() instead
	splicing array
		splice() add new items and returns an array of deleted items
			splice(indexNo, noOfElementsToRemove, newElements, newElem.., ...)
			myArr.splice(3, 0, "myNewElement1", "myNewElement2")
	splicing to remove elements
		can remove elements without leaving holes in array like 'delete'
		myArr.splice(0, 2) // removes first 2 item
	concatenating arrays
		concat() returns a new merged array, can take multiple arguments
			arr1.concat(arr2);
			arr1.concat(arr2, arr3); 
		also take string arguments
			arr1.concat("hello")
	slicing array - cut out piece of array in a new array (original fine)
		slice() returns a new array without the sliced elements
		slice(start/ingIndex, endIndex) // second arg is optional
		arr.slice(2) // removes third element to end element
		arr.slice(2, 4) // removes third to fifth elements 
	Automatic toString()
		JS automatically convertr an array to comma seperated string when a primative value is expected 
			this always happens when you try to outpup an array
			both do same thing:
				var fruits = ["Banana", "Orange", "Apple", "Mango"];
				document.getElementById("demo").innerHTML = fruits; 
				document.getElementById("demo").innerHTML = fruits.toString();
Sorting arrays
	sort() sorts array alphabetically
	reverse() reverse the elements in array, to sort reverse alphabet use 'sort' then 'reverse'
	numeric sort
		Default: sort() sorts values as strings
		A compare function can solve this problem:
			numArr.sort(function(a, b){return a - b});  // ascending
			numArr.sort(function(a, b){return b - a});  // descending
			a compare function should return a negative, zero, or positive value
				If result is negative a is sorted before b.
				If result is positive b is sorted before a.
				If result is 0 no changes are done with the sort order of the two values.
			the compare function compares all values within array two at a time (a, b)
				e.g. (30, 40) = (30 - 40) = -10 = negative = 30 is sorted before 40
	randomly sort array
		// example below favours some numbers over others
		numArr.sort(function(a, b){return 0.5 - Math.random()}); // not very random
		A popular method is the Fisher Yates shuffle, implemented in JS:
			var points = [40, 100, 1, 5, 25, 10];
			for (i = points.length -1; i > 0; i--) {
			  j = Math.floor(Math.random() * i)
			  k = points[i]
			  points[i] = points[j]
			  points[j] = k
			} 
	highest/lowest values
		Max and Min values - no built-in feature
		however, after sorting using the highest and lowest index values
			but, sorting a whole array is inefficient for finding the highest/lowest value
		arr.sort(function(a, b){return a - b});   // sort ascending
		console.log arr[0];            //for lowest value
		console.log arr[arr.length-1]; //for highest value
		arr.sort(function(a, b){return b - a});  // sort descending
		console.log arr[0];            //for highest value
		console.log arr[arr.length-1]; //for lowest value
		re: but, sorting a whole array is inefficient for finding the highest/lowest value
		Math.max.apply can find highest number in array
			function myArrayMax(arr) {
			  return Math.max.apply(null, arr);
			} 			// Math.max.apply(null, [1, 2, 3]) is equivalent to Math.max(1, 2, 3)
		Math.min.apply can find lowest number in array
			function myArrayMin(arr) {
			  return Math.min.apply(null, arr);
			}       //Math.min.apply(null, [1, 2, 3]) is equivalent to Math.min(1, 2, 3)
	my min/max JS methods
		Fastest solution is to use a user made method
		function loops through an array comparing each value with the highest value found: 
			function myArrayMax(arr) {
			  var len = arr.length;
			  var max = -Infinity;
			  while (len--) {
			    if (arr[len] > max) {
			      max = arr[len];
			    }
			  }
			  return max;
			} 
		This function loops through an array comparing each value with the lowest value found: 
			function myArrayMin(arr) {
			  var len = arr.length;
			  var min = Infinity;
			  while (len--) {
			    if (arr[len] < min) {
			      min = arr[len];
			    }
			  }
			  return min;
			} 
	sorting object arrays
		arr.sort(function(a, b){return a.property - b.property}); 
		Comparing string properties is a little more complex:
			cars.sort(function(a, b){
			  var x = a.type.toLowerCase();
			  var y = b.type.toLowerCase();
			  if (x < y) {return -1;}
			  if (x > y) {return 1;}
			  return 0;
			}); 





