JavaScript
	programming language used for the web, server programs like Node.js and databases like MongoDB
	program behaviour of web pages
	can change HTML Content, attributes and styles(CSS)
	Requirments: none

syntax:
<script> js code </script> // internal within html
<script src="myScript.js"></script> // external - point to js file within html

Javascript can be placed within head or body of html

Output
	display data in different ways:
		innerHTML	- write into HTML element
		document.write() - write into HTML output
		window.alert() - write to alert box
		console.log() - write to browser console 
	innerHTML - property that defines HTML content
		can use document.getElementById(id) to access HTML element
		changing innerHTML property of an element is a common way of displaying data
	document.write() - good for testing purposes
		warning: using document.write() after html document is lodaed will delete all existing HTML
		<h1>My First Web Page</h1>
		<p>My first paragraph.</p>
		// button pressed after html is loaded
		<button type="button" onclick="document.write(5 + 6)">Try it</button> 
	Window.alert()
		window.alert(5 + 6);
	console.log() - usefull for depugging purposes
	JavaScript print - there are no print objects or print methods
		cannot access output devices from JS
		One exception is using:
		window.print() - prints current window content

JS statements
	compose of values, operators, expressions, keywords and comments
	statements are executed one by one in order from top to bottom of file
	';' seperates JS statements
	multipul stasemnts are allowed on one line
whitespace is ignored
JS is case sensitive
Hyphens are not allowed in JavaScript. They are reserved for subtractions.
best to use camelCase

// comment
/* multi-line comment */

Variables

	let variable; // same as undefined if not already initialise
	let string = "Hello";
	let int = 10;
	let float = 15.371;
	let bool = true;
	let arr = [red,green,blue];
	let dog = { name : 'Spot', breed : 'Dalmatian' };
	let notDefine = undefined;
	let nothing = null; // typeof is an object but is null
		undefined vs null
		typeof undefined    // undefined
		typeof null         // object
		null === undefined  // false
		null == undefined   // true
	// constant
	const constant = 9;

	typeof - operator to find type of variable
		typeof "John" // Returns "string"
		typeof 314  // Returns "number"

	primative data - simtle single data value 
		typeop operator returns these primative types
			string, number, boolian, undefined
	complex data
		typeof operator returns either:
			function
			object - returns 'object' for objects, arrays and null

	JS identifiers rule
		can contain letters, digits, underscores and dollar signs
		must start with letter or '$'
		reserved words cannot be used such as JS keywords
Function - block of code to perform a particular task
	function is executed when it is invoked
	function name(parameter1, parameter2, parameter3) {
	  // code to be executed
	}	

	Local scope
		variables decalared in a function become local to it
		local variables are created when a func starts and deleted when func complete
			variables can only be accessde from within the function
			// cannot use myVar (outside of scope)

			function myFunction() {
			  let myVar = "hello";
			  // can use myVar (within scope)
			}

			// cannot use myVar (outside of scope) 

Obejects
	objects have properties and methods 
	properties are writen in 'name:value' pairs:
		let myObj = {shape:"square", size:"500", color:"white"};
		access object properties
			'objName.propertyName' or 'objName["propertyName"]'
	methods are actions that can be preformed on okjects
	a method is a function stored as a property:
		let person = {
		  firstName: "John",
		  lastName : "Doe",
		  id       : 5566,
		  fullName : function() {
		    return this.firstName + " " + this.lastName;
		  }
		};
		access object methods
			'objName.methodName()' 
			accessing a method without '()' returns the function definition
	Avoid declaring strings, numbers and booleans as objects 
		* as they complicate code and slow down execution speed
		when a var is declared with the 'new' keyword the var is created as an object
	let x = new String();        // Declares x as a String object
	let y = new Number();        // Declares y as a Number object
	let z = new Boolean();       // Declares z as a Boolean object

	comparing JS oblects will always return false (x==y) and (x===y)

	'this' keyword
		in a function definition this refers to the owner of the functon
Events
	HTML events cause "something" to happen to HTML elements 
	when JS is used in HTML, JS can "react" on these events
	JS can execute code when events are detected
	<element event='some JavaScript'> or <element event="some JavaScript">
	e.g. <button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>
	or call a func:  <button onclick="displayDate()">The time is?</button> 
	common HTML events
	onchange, onclick, onmouseover, onmouseout, onkeydown, onload
	event handlers can handle and verify, user input, user actions and browser actions

Strings 
	let squote = 'single quotes';
	let dquote = "or double";
	find length of strings with the built-in 'lenght' property
		let txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		document.getElementById("demo").innerHTML = txt.length;
	escape char '\' turns special chars into string chars
String methods
	primative values vannot have properties or methods as they are not objects
	however methods and properties are available to primitive values 
		as JS treats primative values as objects when execusing methods and properties
		e.g. the 'length' property returns the length of a string
	indexOf() returns the index of the first occurenct of text within a string
	JS counts positions from zero
	lastIndexOf() returns the index last occurence of text within a string (searches backwards)
	indexOf() and lastIndexOf() both:
		* return '-1' when no occurence found
		* accept second parameter for starting position for search
	search() acts exactly same as indexOf() but does not take second starting position argument, and can take powerful search values (regular expressions) which indexOf() cannot
	Extracting string parts	- three methods to extract part of sting
    slice(start, end) - returns extracted part in a new string
    substring(start, end) - same as slice() but cannot take negatives
    substr(start, length) - same as slice but second parameter species length to be extracted
    start and end values are indexes, if negative the position is counted from end of string. can have one parameter
	replacing string content
		replace('strPart','replacement') - replaces value with another (in a new sting)
			default: case sensitive, first word match
				regular expressions are written without quotes
				replace case insensitive by using a regular expression with '/i' flag (insensitive)
					replace(/strPart/i,'replacement') 
				repalce all matches using a regular expression with '/g' flag (global match)
					replace(/strPart/g,'replacement') 
	convert to upper and lower case
		toUpperCase() converts to upper case
		toLowerCase() converts to lower case
	concatination
		concat() joins two or more strings
	remove whitespace
		trim() removes whitespase from both sides of string 
			(not supported IE8 or lower)
		for IE8 support use replace() with a regular expression:
			replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ''))
			use above solution to add trim function to 'string.prototype'
	extracting chars - three main methods
    charAt(position) - return char at specified index
    charCodeAt(position) returns unicode of char at specified index
    Property access[ ] - same as charAt() but uses property access
    	property access may beu npredictable
  convert string to array
  	split() 
	  	split(",") // split on commas
			split(" ") // split on spaces
			split("|") // split on pipe 
			split("")  // split on chars
Numbers
	JS has only one type of number; no int, short, long, float
	can use scientific notation for extra samll and large numbers 'let x= 12e5;'
	JS numbers are always 64-bit floating point, they are always stored as double precision floating point numbers
	this format stores numbers in64 bits, where faction the number is stored in bits 0-51, exponent in 52-62 and the sign in 63
	Precision
		ints are accurate up to 15 digits
		macimum number of decimals is 17 digits
	Adding numbers and strings 
		JS use '+' for both addition and concatenation	
			numbers are added 
			strings are concatinated
		num + num = num
		str + str = str
		num + str = str
		str + num = str
	Numeric strings
		JS strings can have numeric content
		JS will try to convert string to numbers in all numeric operations
		"2" + "1" = "21" //str '+' concatinates
		"2" - "1" = 1    //num
		"2" * "1" = 2    //num
		"2" / "1" = 2    //num
	NaN - Not a Number
		JS reserved word indicating that a numder is not a legal number
		arithmetics with non-numeric strings result in NaN
		1 * "hello" = NaN
		1 * "100" = 100    // number with numeric stirng 
		isNaN() - returns true if not a number
		isNaN is a gloval JS function
		NaN is a number 'typof NaN' //returns number
	Infinity - returned if number outride of largest possible number
		let myNumber = 2;
			while (myNumber != Infinity) {   // Execute until Infinity
			  myNumber = myNumber * myNumber;
			}
		division by zero generates 'Infinity'
		Infinity is a number 'typeof Infinity' //returns number
	Hexadecimal
		JS interprets numeric constants as hexadecimal if preceded by 0x
		let x = 0xFF // x will be 255







